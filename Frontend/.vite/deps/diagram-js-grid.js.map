{
  "version": 3,
  "sources": ["../../node_modules/path-intersection/intersect.js", "../../node_modules/diagram-js/lib/features/grid-snapping/GridUtil.js", "../../node_modules/diagram-js/lib/layout/LayoutUtil.js", "../../node_modules/diagram-js/lib/util/ModelUtil.js", "../../node_modules/diagram-js-grid/dist/index.esm.js"],
  "sourcesContent": ["'use strict';\n\n/**\n * This file contains source code adapted from Snap.svg (licensed Apache-2.0).\n *\n * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js\n */\n\n/* eslint no-fallthrough: \"off\" */\n\nvar p2s = /,?([a-z]),?/gi,\n    toFloat = parseFloat,\n    math = Math,\n    PI = math.PI,\n    mmin = math.min,\n    mmax = math.max,\n    pow = math.pow,\n    abs = math.abs,\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[-+]?\\d+)?)[\\s]*,?[\\s]*/ig;\n\nvar isArray = Array.isArray || function(o) { return o instanceof Array; };\n\nfunction hasProperty(obj, property) {\n  return Object.prototype.hasOwnProperty.call(obj, property);\n}\n\nfunction clone(obj) {\n\n  if (typeof obj == 'function' || Object(obj) !== obj) {\n    return obj;\n  }\n\n  var res = new obj.constructor;\n\n  for (var key in obj) {\n    if (hasProperty(obj, key)) {\n      res[key] = clone(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nfunction repush(array, item) {\n  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n    return array.push(array.splice(i, 1)[0]);\n  }\n}\n\nfunction cacher(f) {\n\n  function newf() {\n\n    var arg = Array.prototype.slice.call(arguments, 0),\n        args = arg.join('\\u2400'),\n        cache = newf.cache = newf.cache || {},\n        count = newf.count = newf.count || [];\n\n    if (hasProperty(cache, args)) {\n      repush(count, args);\n      return cache[args];\n    }\n\n    count.length >= 1e3 && delete cache[count.shift()];\n    count.push(args);\n    cache[args] = f.apply(0, arg);\n\n    return cache[args];\n  }\n  return newf;\n}\n\nfunction parsePathString(pathString) {\n\n  if (!pathString) {\n    return null;\n  }\n\n  var pth = paths(pathString);\n\n  if (pth.arr) {\n    return clone(pth.arr);\n  }\n\n  var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },\n      data = [];\n\n  if (isArray(pathString) && isArray(pathString[0])) { // rough assumption\n    data = clone(pathString);\n  }\n\n  if (!data.length) {\n\n    String(pathString).replace(pathCommand, function(a, b, c) {\n      var params = [],\n          name = b.toLowerCase();\n\n      c.replace(pathValues, function(a, b) {\n        b && params.push(+b);\n      });\n\n      if (name == 'm' && params.length > 2) {\n        data.push([b].concat(params.splice(0, 2)));\n        name = 'l';\n        b = b == 'm' ? 'l' : 'L';\n      }\n\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n  }\n\n  data.toString = paths.toString;\n  pth.arr = clone(data);\n\n  return data;\n}\n\nfunction paths(ps) {\n  var p = paths.ps = paths.ps || {};\n\n  if (p[ps]) {\n    p[ps].sleep = 100;\n  } else {\n    p[ps] = {\n      sleep: 100\n    };\n  }\n\n  setTimeout(function() {\n    for (var key in p) {\n      if (hasProperty(p, key) && key != ps) {\n        p[key].sleep--;\n        !p[key].sleep && delete p[key];\n      }\n    }\n  });\n\n  return p[ps];\n}\n\nfunction rectBBox(x, y, width, height) {\n\n  if (arguments.length === 1) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    x2: x + width,\n    y2: y + height\n  };\n}\n\nfunction pathToString() {\n  return this.join(',').replace(p2s, '$1');\n}\n\nfunction pathClone(pathArray) {\n  var res = clone(pathArray);\n  res.toString = pathToString;\n  return res;\n}\n\nfunction findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t,\n      t13 = pow(t1, 3),\n      t12 = pow(t1, 2),\n      t2 = t * t,\n      t3 = t2 * t,\n      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n\n  return {\n    x: fixError(x),\n    y: fixError(y)\n  };\n}\n\nfunction bezierBBox(points) {\n\n  var bbox = curveBBox.apply(null, points);\n\n  return rectBBox(\n    bbox.x0,\n    bbox.y0,\n    bbox.x1 - bbox.x0,\n    bbox.y1 - bbox.y0\n  );\n}\n\nfunction isPointInsideBBox(bbox, x, y) {\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}\n\nfunction isBBoxIntersect(bbox1, bbox2) {\n  bbox1 = rectBBox(bbox1);\n  bbox2 = rectBBox(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n        || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n        || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n}\n\nfunction base3(t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n}\n\nfunction bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\n  if (z == null) {\n    z = 1;\n  }\n\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n\n  var z2 = z / 2,\n      n = 12,\n      Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n      Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n      sum = 0;\n\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2,\n        xbase = base3(ct, x1, x2, x3, x4),\n        ybase = base3(ct, y1, y2, y3, y4),\n        comb = xbase * xbase + ybase * ybase;\n\n    sum += Cvalues[i] * math.sqrt(comb);\n  }\n\n  return z2 * sum;\n}\n\n\nfunction intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n  if (\n    mmax(x1, x2) < mmin(x3, x4) ||\n      mmin(x1, x2) > mmax(x3, x4) ||\n      mmax(y1, y2) < mmin(y3, y4) ||\n      mmin(y1, y2) > mmax(y3, y4)\n  ) {\n    return;\n  }\n\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n\n  var px = fixError(nx / denominator),\n      py = fixError(ny / denominator),\n      px2 = +px.toFixed(2),\n      py2 = +py.toFixed(2);\n\n  if (\n    px2 < +mmin(x1, x2).toFixed(2) ||\n      px2 > +mmax(x1, x2).toFixed(2) ||\n      px2 < +mmin(x3, x4).toFixed(2) ||\n      px2 > +mmax(x3, x4).toFixed(2) ||\n      py2 < +mmin(y1, y2).toFixed(2) ||\n      py2 > +mmax(y1, y2).toFixed(2) ||\n      py2 < +mmin(y3, y4).toFixed(2) ||\n      py2 > +mmax(y3, y4).toFixed(2)\n  ) {\n    return;\n  }\n\n  return { x: px, y: py };\n}\n\nfunction fixError(number) {\n  return Math.round(number * 100000000000) / 100000000000;\n}\n\nfunction findBezierIntersections(bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1),\n      bbox2 = bezierBBox(bez2);\n\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n\n  // As an optimization, lines will have only 1 segment\n\n  var l1 = bezlen.apply(0, bez1),\n      l2 = bezlen.apply(0, bez2),\n      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,\n      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,\n      dots1 = [],\n      dots2 = [],\n      xy = {},\n      res = justCount ? 0 : [];\n\n  for (var i = 0; i < n1 + 1; i++) {\n    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({ x: p.x, y: p.y, t: i / n1 });\n  }\n\n  for (i = 0; i < n2 + 1; i++) {\n    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({ x: p.x, y: p.y, t: i / n2 });\n  }\n\n  for (i = 0; i < n1; i++) {\n\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i],\n          di1 = dots1[i + 1],\n          dj = dots2[j],\n          dj1 = dots2[j + 1],\n          ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',\n          cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',\n          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),\n          key;\n\n      if (is) {\n        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);\n\n        if (xy[key]) {\n          continue;\n        }\n\n        xy[key] = true;\n\n        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\n          if (justCount) {\n            res++;\n          } else {\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\n/**\n * Find or counts the intersections between two SVG paths.\n *\n * Returns a number in counting mode and a list of intersections otherwise.\n *\n * A single intersection entry contains the intersection coordinates (x, y)\n * as well as additional information regarding the intersecting segments\n * on each path (segment1, segment2) and the relative location of the\n * intersection on these segments (t1, t2).\n *\n * The path may be an SVG path string or a list of path components\n * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.\n *\n * @example\n *\n * var intersections = findPathIntersections(\n *   'M0,0L100,100',\n *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]\n * );\n *\n * // intersections = [\n * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }\n * // ]\n *\n * @param {String|Array<PathDef>} path1\n * @param {String|Array<PathDef>} path2\n * @param {Boolean} [justCount=false]\n *\n * @return {Array<Intersection>|Number}\n */\nfunction findPathIntersections(path1, path2, justCount) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n\n  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n      res = justCount ? 0 : [];\n\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n\n    if (pi[0] == 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n\n      if (pi[0] == 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n\n        if (pj[0] == 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n\n          if (pj[0] == 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n\n          var intr = findBezierIntersections(bez1, bez2, justCount);\n\n          if (justCount) {\n            res += intr;\n          } else {\n\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\nfunction pathToAbsolute(pathArray) {\n  var pth = paths(pathArray);\n\n  if (pth.abs) {\n    return pathClone(pth.abs);\n  }\n\n  if (!isArray(pathArray) || !isArray(pathArray && pathArray[0])) { // rough assumption\n    pathArray = parsePathString(pathArray);\n  }\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  var res = [],\n      x = 0,\n      y = 0,\n      mx = 0,\n      my = 0,\n      start = 0,\n      pa0;\n\n  if (pathArray[0][0] == 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n\n      switch (r[0]) {\n      case 'A':\n        r[1] = pa[1];\n        r[2] = pa[2];\n        r[3] = pa[3];\n        r[4] = pa[4];\n        r[5] = pa[5];\n        r[6] = +pa[6] + x;\n        r[7] = +pa[7] + y;\n        break;\n      case 'V':\n        r[1] = +pa[1] + y;\n        break;\n      case 'H':\n        r[1] = +pa[1] + x;\n        break;\n      case 'M':\n        mx = +pa[1] + x;\n        my = +pa[2] + y;\n      default:\n        for (var j = 1, jj = pa.length; j < jj; j++) {\n          r[j] = +pa[j] + ((j % 2) ? x : y);\n        }\n      }\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n\n    switch (r[0]) {\n    case 'Z':\n      x = +mx;\n      y = +my;\n      break;\n    case 'H':\n      x = r[1];\n      break;\n    case 'V':\n      y = r[1];\n      break;\n    case 'M':\n      mx = r[r.length - 2];\n      my = r[r.length - 1];\n    default:\n      x = r[r.length - 2];\n      y = r[r.length - 1];\n    }\n  }\n\n  res.toString = pathToString;\n  pth.abs = pathClone(res);\n\n  return res;\n}\n\nfunction isLine(bez) {\n  return (\n    bez[0] === bez[2] &&\n    bez[1] === bez[3] &&\n    bez[4] === bez[6] &&\n    bez[5] === bez[7]\n  );\n}\n\nfunction lineToCurve(x1, y1, x2, y2) {\n  return [\n    x1, y1, x2,\n    y2, x2, y2\n  ];\n}\n\nfunction qubicToCurve(x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n      _23 = 2 / 3;\n\n  return [\n    _13 * x1 + _23 * ax,\n    _13 * y1 + _23 * ay,\n    _13 * x2 + _23 * ax,\n    _13 * y2 + _23 * ay,\n    x2,\n    y2\n  ];\n}\n\nfunction arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = PI * 120 / 180,\n      rad = PI / 180 * (+angle || 0),\n      res = [],\n      xy,\n      rotate = cacher(function(x, y, rad) {\n        var X = x * math.cos(rad) - y * math.sin(rad),\n            Y = x * math.sin(rad) + y * math.cos(rad);\n\n        return { x: X, y: Y };\n      });\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    var x = (x1 - x2) / 2,\n        y = (y1 - y2) / 2;\n\n    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\n    if (h > 1) {\n      h = math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n\n    var rx2 = rx * rx,\n        ry2 = ry * ry,\n        k = (large_arc_flag == sweep_flag ? -1 : 1) *\n            math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n        cx = k * rx * y / ry + (x1 + x2) / 2,\n        cy = k * -ry * x / rx + (y1 + y2) / 2,\n        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n        f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? PI - f1 : f1;\n    f2 = x2 < cx ? PI - f2 : f2;\n    f1 < 0 && (f1 = PI * 2 + f1);\n    f2 < 0 && (f2 = PI * 2 + f2);\n\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (abs(df) > _120) {\n    var f2old = f2,\n        x2old = x2,\n        y2old = y2;\n\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * math.cos(f2);\n    y2 = cy + ry * math.sin(f2);\n    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n\n  var c1 = math.cos(f1),\n      s1 = math.sin(f1),\n      c2 = math.cos(f2),\n      s2 = math.sin(f2),\n      t = math.tan(df / 4),\n      hx = 4 / 3 * rx * t,\n      hy = 4 / 3 * ry * t,\n      m1 = [x1, y1],\n      m2 = [x1 + hx * s1, y1 - hy * c1],\n      m3 = [x2 + hx * s2, y2 - hy * c2],\n      m4 = [x2, y2];\n\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\n// Returns bounding box of cubic bezier curve.\n// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n// Original version: NISHIO Hirokazu\n// Modifications: https://github.com/timo22345\nfunction curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [],\n      bounds = [[], []],\n      a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n  for (var i = 0; i < 2; ++i) {\n\n    if (i == 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n\n    if (abs(a) < 1e-12) {\n\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n\n      t = -c / b;\n\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n\n      continue;\n    }\n\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = math.sqrt(b2ac);\n\n    if (b2ac < 0) {\n      continue;\n    }\n\n    t1 = (-b + sqrtb2ac) / (2 * a);\n\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n\n    t2 = (-b - sqrtb2ac) / (2 * a);\n\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  var j = tvalues.length,\n      jlen = j,\n      mt;\n\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n    bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    x0: mmin.apply(0, bounds[0]),\n    y0: mmin.apply(0, bounds[1]),\n    x1: mmax.apply(0, bounds[0]),\n    y1: mmax.apply(0, bounds[1])\n  };\n}\n\nfunction pathToCurve(path) {\n\n  var pth = paths(path);\n\n  // return cached curve, if existing\n  if (pth.curve) {\n    return pathClone(pth.curve);\n  }\n\n  var curvedPath = pathToAbsolute(path),\n      attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n      processPath = function(path, d, pathCommand) {\n        var nx, ny;\n\n        if (!path) {\n          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n        }\n\n        !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\n        switch (path[0]) {\n        case 'M':\n          d.X = path[1];\n          d.Y = path[2];\n          break;\n        case 'A':\n          path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));\n          break;\n        case 'S':\n          if (pathCommand == 'C' || pathCommand == 'S') {\n\n            // In 'S' case we have to take into account, if the previous command is C/S.\n            nx = d.x * 2 - d.bx;\n\n            // And reflect the previous\n            ny = d.y * 2 - d.by;\n\n            // command's control point relative to the current point.\n          }\n          else {\n\n            // or some else or nothing\n            nx = d.x;\n            ny = d.y;\n          }\n          path = ['C', nx, ny].concat(path.slice(1));\n          break;\n        case 'T':\n          if (pathCommand == 'Q' || pathCommand == 'T') {\n\n            // In 'T' case we have to take into account, if the previous command is Q/T.\n            d.qx = d.x * 2 - d.qx;\n\n            // And make a reflection similar\n            d.qy = d.y * 2 - d.qy;\n\n            // to case 'S'.\n          }\n          else {\n\n            // or something else or nothing\n            d.qx = d.x;\n            d.qy = d.y;\n          }\n          path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n          break;\n        case 'Q':\n          d.qx = path[1];\n          d.qy = path[2];\n          path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));\n          break;\n        case 'L':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));\n          break;\n        case 'H':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));\n          break;\n        case 'V':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));\n          break;\n        case 'Z':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));\n          break;\n        }\n\n        return path;\n      },\n\n      fixArc = function(pp, i) {\n\n        if (pp[i].length > 7) {\n          pp[i].shift();\n          var pi = pp[i];\n\n          while (pi.length) {\n            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved\n            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n          }\n\n          pp.splice(i, 1);\n          ii = curvedPath.length;\n        }\n      },\n\n      pathCommands = [], // path commands of original path p\n      pfirst = '', // temporary holder for original path command\n      pathCommand = ''; // holder for previous path command of original path\n\n  for (var i = 0, ii = curvedPath.length; i < ii; i++) {\n    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command\n\n    if (pfirst != 'C') // C is not saved yet, because it may be result of conversion\n    {\n      pathCommands[i] = pfirst; // Save current path command\n      i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand\n    }\n    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath\n\n    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands\n\n    var seg = curvedPath[i],\n        seglen = seg.length;\n\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n  }\n\n  // cache curve\n  pth.curve = pathClone(curvedPath);\n\n  return curvedPath;\n}\n\nmodule.exports = findPathIntersections;\n", "export var SPACING = 10;\n\nexport function quantize(value, quantum, fn) {\n  if (!fn) {\n    fn = 'round';\n  }\n\n  return Math[ fn ](value / quantum) * quantum;\n}", "import {\n  isObject,\n  sortBy\n} from 'min-dash';\n\nimport {\n  pointDistance,\n  pointsOnLine\n} from '../util/Geometry';\n\nimport intersectPaths from 'path-intersection';\n\nimport { isConnection } from '../util/ModelUtil';\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * @param {Rect} bounds\n *\n * @returns {Rect}\n */\nexport function roundBounds(bounds) {\n  return {\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  };\n}\n\n/**\n * @param {Point} point\n *\n * @returns {Point}\n */\nexport function roundPoint(point) {\n\n  return {\n    x: Math.round(point.x),\n    y: Math.round(point.y)\n  };\n}\n\n\n/**\n * Convert the given bounds to a { top, left, bottom, right } descriptor.\n *\n * @param {Point|Rect} bounds\n *\n * @return {RectTRBL}\n */\nexport function asTRBL(bounds) {\n  return {\n    top: bounds.y,\n    right: bounds.x + (bounds.width || 0),\n    bottom: bounds.y + (bounds.height || 0),\n    left: bounds.x\n  };\n}\n\n\n/**\n * Convert a { top, left, bottom, right } to an objects bounds.\n *\n * @param {RectTRBL} trbl\n *\n * @return {Rect}\n */\nexport function asBounds(trbl) {\n  return {\n    x: trbl.left,\n    y: trbl.top,\n    width: trbl.right - trbl.left,\n    height: trbl.bottom - trbl.top\n  };\n}\n\n\n/**\n * Get the mid of the given bounds or point.\n *\n * @param {Point|Rect} bounds\n *\n * @return {Point}\n */\nexport function getBoundsMid(bounds) {\n  return roundPoint({\n    x: bounds.x + (bounds.width || 0) / 2,\n    y: bounds.y + (bounds.height || 0) / 2\n  });\n}\n\n\n/**\n * Get the mid of the given Connection.\n *\n * @param {Connection} connection\n *\n * @return {Point}\n */\nexport function getConnectionMid(connection) {\n  var waypoints = connection.waypoints;\n\n  // calculate total length and length of each segment\n  var parts = waypoints.reduce(function(parts, point, index) {\n\n    var lastPoint = waypoints[index - 1];\n\n    if (lastPoint) {\n      var lastPart = parts[parts.length - 1];\n\n      var startLength = lastPart && lastPart.endLength || 0;\n      var length = distance(lastPoint, point);\n\n      parts.push({\n        start: lastPoint,\n        end: point,\n        startLength: startLength,\n        endLength: startLength + length,\n        length: length\n      });\n    }\n\n    return parts;\n  }, []);\n\n  var totalLength = parts.reduce(function(length, part) {\n    return length + part.length;\n  }, 0);\n\n  // find which segement contains middle point\n  var midLength = totalLength / 2;\n\n  var i = 0;\n  var midSegment = parts[i];\n\n  while (midSegment.endLength < midLength) {\n    midSegment = parts[++i];\n  }\n\n  // calculate relative position on mid segment\n  var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;\n\n  var midPoint = {\n    x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,\n    y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress\n  };\n\n  return midPoint;\n}\n\n\n/**\n * Get the mid of the given Element.\n *\n * @param {Element} element\n *\n * @return {Point}\n */\nexport function getMid(element) {\n  if (isConnection(element)) {\n    return getConnectionMid(element);\n  }\n\n  return getBoundsMid(element);\n}\n\n// orientation utils //////////////////////\n\n/**\n * Get orientation of the given rectangle with respect to\n * the reference rectangle.\n *\n * A padding (positive or negative) may be passed to influence\n * horizontal / vertical orientation and intersection.\n *\n * @param {Rect} rect\n * @param {Rect} reference\n * @param {Point|number} padding\n *\n * @return {DirectionTRBL} the orientation; one of top, top-left, left, ..., bottom, right or intersect.\n */\nexport function getOrientation(rect, reference, padding) {\n\n  padding = padding || 0;\n\n  // make sure we can use an object, too\n  // for individual { x, y } padding\n  if (!isObject(padding)) {\n    padding = { x: padding, y: padding };\n  }\n\n\n  var rectOrientation = asTRBL(rect),\n      referenceOrientation = asTRBL(reference);\n\n  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,\n      right = rectOrientation.left - padding.x >= referenceOrientation.right,\n      bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,\n      left = rectOrientation.right + padding.x <= referenceOrientation.left;\n\n  var vertical = top ? 'top' : (bottom ? 'bottom' : null),\n      horizontal = left ? 'left' : (right ? 'right' : null);\n\n  if (horizontal && vertical) {\n    return vertical + '-' + horizontal;\n  } else {\n    return horizontal || vertical || 'intersect';\n  }\n}\n\n\n// intersection utils //////////////////////\n\n/**\n * Get intersection between an element and a line path.\n *\n * @param {string} elementPath\n * @param {string} linePath\n * @param {boolean} cropStart Whether to crop start or end.\n *\n * @return {Point}\n */\nexport function getElementLineIntersection(elementPath, linePath, cropStart) {\n\n  var intersections = getIntersections(elementPath, linePath);\n\n  // recognize intersections\n  // only one -> choose\n  // two close together -> choose first\n  // two or more distinct -> pull out appropriate one\n  // none -> ok (fallback to point itself)\n  if (intersections.length === 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length > 1) {\n\n    // sort by intersections based on connection segment +\n    // distance from start\n    intersections = sortBy(intersections, function(i) {\n      var distance = Math.floor(i.t2 * 100) || 1;\n\n      distance = 100 - distance;\n\n      distance = (distance < 10 ? '0' : '') + distance;\n\n      // create a sort string that makes sure we sort\n      // line segment ASC + line segment position DESC (for cropStart)\n      // line segment ASC + line segment position ASC (for cropEnd)\n      return i.segment2 + '#' + distance;\n    });\n\n    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);\n  }\n\n  return null;\n}\n\n\nexport function getIntersections(a, b) {\n  return intersectPaths(a, b);\n}\n\n\nexport function filterRedundantWaypoints(waypoints) {\n\n  // alter copy of waypoints, not original\n  waypoints = waypoints.slice();\n\n  var idx = 0,\n      point,\n      previousPoint,\n      nextPoint;\n\n  while (waypoints[idx]) {\n    point = waypoints[idx];\n    previousPoint = waypoints[idx - 1];\n    nextPoint = waypoints[idx + 1];\n\n    if (pointDistance(point, nextPoint) === 0 ||\n        pointsOnLine(previousPoint, nextPoint, point)) {\n\n      // remove point, if overlapping with {nextPoint}\n      // or on line with {previousPoint} -> {point} -> {nextPoint}\n      waypoints.splice(idx, 1);\n    } else {\n      idx++;\n    }\n  }\n\n  return waypoints;\n}\n\n// helpers //////////////////////\n\nfunction distance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}", "import {\n  has,\n  isNil,\n  isObject\n} from 'min-dash';\n\n/**\n * Checks whether a value is an instance of Connection.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nexport function isConnection(value) {\n  return isObject(value) && has(value, 'waypoints');\n}\n\n/**\n * Checks whether a value is an instance of Label.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nexport function isLabel(value) {\n  return isObject(value) && has(value, 'labelTarget');\n}\n\n/**\n * Checks whether a value is an instance of Root.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nexport function isRoot(value) {\n  return isObject(value) && isNil(value.parent);\n}", "import { create, append, attr, clear } from 'tiny-svg';\nimport { query } from 'min-dom';\nimport { SPACING, quantize } from 'diagram-js/lib/features/grid-snapping/GridUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\n\n/**\r\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\r\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\r\n */\r\n\r\nvar GRID_COLOR = '#ccc',\r\n    LAYER_NAME = 'djs-grid';\r\n\r\nvar GRID_DIMENSIONS = {\r\n  width: 100000,\r\n  height: 100000\r\n};\r\n\r\n/**\r\n * @param {Canvas} canvas\r\n * @param {EventBus} eventBus\r\n */\r\nfunction Grid(canvas, eventBus) {\r\n  this._canvas = canvas;\r\n\r\n  var self = this;\r\n\r\n  eventBus.on('diagram.init', function() {\r\n    self._init();\r\n    self.toggle(true);\r\n  });\r\n\r\n  eventBus.on('gridSnapping.toggle', function(event) {\r\n    var active = event.active;\r\n\r\n    self.toggle(active);\r\n\r\n    self._centerGridAroundViewbox();\r\n  });\r\n\r\n  eventBus.on('canvas.viewbox.changed', function(context) {\r\n    var viewbox = context.viewbox;\r\n\r\n    self._centerGridAroundViewbox(viewbox);\r\n  });\r\n}\r\n\r\nGrid.prototype._init = function() {\r\n  var defs = query('defs', this._canvas._svg);\r\n\r\n  if (!defs) {\r\n    defs = create('defs');\r\n\r\n    append(this._canvas._svg, defs);\r\n  }\r\n\r\n  var pattern = this._pattern = create('pattern');\r\n\r\n  var patternId = 'djs-grid-pattern-' + randomNumber();\r\n\r\n  attr(pattern, {\r\n    id: patternId,\r\n    width: SPACING,\r\n    height: SPACING,\r\n    patternUnits: 'userSpaceOnUse'\r\n  });\r\n\r\n  var circle = this._circle = create('circle');\r\n\r\n  attr(circle, {\r\n    cx: 0.5,\r\n    cy: 0.5,\r\n    r: 0.5,\r\n    fill: GRID_COLOR\r\n  });\r\n\r\n  append(pattern, circle);\r\n\r\n  append(defs, pattern);\r\n\r\n  var grid = this._gfx = create('rect');\r\n\r\n  attr(grid, {\r\n    x: -(GRID_DIMENSIONS.width / 2),\r\n    y: -(GRID_DIMENSIONS.height / 2),\r\n    width: GRID_DIMENSIONS.width,\r\n    height: GRID_DIMENSIONS.height,\r\n    fill: `url(#${ patternId })`\r\n  });\r\n};\r\n\r\nGrid.prototype._centerGridAroundViewbox = function(viewbox) {\r\n  if (!viewbox) {\r\n    viewbox = this._canvas.viewbox();\r\n  }\r\n\r\n  var mid = getMid(viewbox);\r\n\r\n  attr(this._gfx, {\r\n    x: -(GRID_DIMENSIONS.width / 2) + quantize(mid.x, SPACING),\r\n    y: -(GRID_DIMENSIONS.height / 2) + quantize(mid.y, SPACING)\r\n  });\r\n};\r\n\r\n/**\r\n * Return the current grid visibility.\r\n *\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isVisible = function() {\r\n  return this._visible;\r\n};\r\n\r\n/**\r\n * Toggle grid visibility.\r\n *\r\n * @param {boolean} [visible] new visible state\r\n */\r\nGrid.prototype.toggle = function(visible) {\r\n\r\n  if (typeof visible === 'undefined') {\r\n    visible = !this._visible;\r\n  }\r\n\r\n  if (visible === this._visible) {\r\n    return;\r\n  }\r\n\r\n  var parent = this._getParent();\r\n\r\n  if (visible) {\r\n    append(parent, this._gfx);\r\n  } else {\r\n    clear(parent);\r\n  }\r\n\r\n  this._visible = visible;\r\n};\r\n\r\nGrid.prototype._getParent = function() {\r\n  return this._canvas.getLayer(LAYER_NAME, -2);\r\n};\r\n\r\nGrid.$inject = [\r\n  'canvas',\r\n  'eventBus'\r\n];\r\n\r\n\r\n// helpers ///////////////\r\n\r\nfunction randomNumber() {\r\n  return Math.trunc(Math.random() * 1000000);\r\n}\n\nvar index = {\n  __init__: [ 'grid' ],\n  grid: [ 'type', Grid ]\n};\n\nexport { index as default };\n"],
  "mappings": "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",
  "names": ["a", "b", "x", "y", "rad", "path", "pathCommand", "i", "parts", "index"]
}
